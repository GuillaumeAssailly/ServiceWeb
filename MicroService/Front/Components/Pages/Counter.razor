@page "/wiki/{id}"

@using System.Text.RegularExpressions
@using System.Net
@using System.Net.Http
@using System.Security.Policy
@using System.Text.Json
@using System.Xml
@using HtmlAgilityPack
@using Microsoft.AspNetCore.Html
@using Newtonsoft.Json
@using JsonSerializer = Newtonsoft.Json.JsonSerializer
@inject HttpClient _HttpClient
@inject NavigationManager NavigationManager
@inject WikispeediaService wikiService

@if (!string.IsNullOrEmpty(htmlContent))
{   
    <div>
        <h1>@PageTitle</h1>
        <p>@rawHtml</p>
    </div>
}


@code {
    [Parameter] public string Id { get; set; }
    private string htmlContent = "";
    private MarkupString rawHtml;
    private string PageTitle;

    protected override async Task OnInitializedAsync()
    {
        htmlContent =  await wikiService.FetchWikiArticle($"https://en.wikipedia.org/w/api.php?action=parse&format=json&page={Id}&prop=text&formatversion=2");
        PageTitle = wikiService.game.path.Last();
        rawHtml = new MarkupString(htmlContent.Replace("\\n", ""));
    }

    protected override async Task OnParametersSetAsync()
    {
        string htmlContent =  await wikiService.FetchWikiArticle($"https://en.wikipedia.org/w/api.php?action=parse&format=json&page={Id}&prop=text&formatversion=2");
        PageTitle = wikiService.game.path.Last();
        rawHtml = new MarkupString(htmlContent.Replace("\\n", ""));
    }
    /*
    private async Task RandomPage()
    {
        await getRandomId();
    }

    private async Task getRandomId()
    {
        string apiUrl = "https://en.wikipedia.org/w/api.php?action=query&format=json&list=random&rnnamespace=0";

        try
        {
            HttpResponseMessage response = await _HttpClient.GetAsync(apiUrl);
            response.EnsureSuccessStatusCode();

            string apiRes = await response.Content.ReadAsStringAsync();

            string pageId = ParsePageId(apiRes);

            response = await _HttpClient.GetAsync($"https://en.wikipedia.org/w/api.php?action=parse&format=json&pageid={pageId}&prop=text&formatversion=2");
            response.EnsureSuccessStatusCode();
            string ApiRes = await response.Content.ReadAsStringAsync();

            var parseResult = JsonConvert.DeserializeObject<ParseResult>(ApiRes);
            string pageTitle = parseResult.Parse.Title;
            NavigationManager.NavigateTo($"/wiki/{pageTitle}");


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }


    }

    static string ParsePageId(string json)
    {
        int startIndex = json.IndexOf("\"id\":") + 5;
        int endIndex = json.IndexOf(",", startIndex);
        return json.Substring(startIndex, endIndex - startIndex);
    }
     */

    
    

}