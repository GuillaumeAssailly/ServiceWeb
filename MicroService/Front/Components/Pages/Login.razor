@page "/login"
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject LoginService loginService
@inject AuthenticationStateProvider authStateProvider

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <h3 class="mb-3">Login</h3>
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <div class="mb-3">
                    <label for="Username" class="form-label">Username</label>
                    <InputText @bind-Value="loginModel.Username" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="Password" class="form-label">Password</label>
                    <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary">Login</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();


    private async void HandleLogin()
    {
        
        var user = loginService.AuthenticateUser(loginModel.Username, loginModel.Password).Result;
        if (user != null)
        {
            var userClaim = await ((CustomAuthenticationStateProvider)authStateProvider).MarkUserAsAuthenticated(user);

            NavigationManager.NavigateTo("/", forceLoad:true);
        }
        else
        {
            // Handle failed authentication
        }
    }

    private class LoginModel
    {
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
    }
}