@inject HttpClient _HttpClient
@inject NavigationManager NavigationManager
@inject SettingsService SettingsService

@page "/settings"
@using Newtonsoft.Json
@using System.Net

<style>
    * {
        list-style-type: none;
        padding: 0; 
    }
</style>

<h1>Settings</h1>

<button @onclick="ToggleUserList">Afficher/Masquer la Liste des Utilisateurs</button>

@if (IsUserListVisible)
{
    @if (SettingsService.Users != null && SettingsService.Users.Any())
    {
        <h3>Liste des Utilisateurs</h3>
        <ul>
            @foreach (var user in SettingsService.Users)
            {
                <li>Id : @user.Id       Name : @user.Name       eMail : @user.Email <button @onclick="() => deleteUser(user.Id)">Delete</button></li>
            }
        </ul>
    }
    else
    {
        <p>Aucun utilisateur trouvé.</p>
    }
}

<button @onclick="ToggleHistory">Afficher/Masquer l'historique de parties'</button>
@if (IsHistoryVisible)
{
    @if (SettingsService.History != null)
    {
        <h3>Historique des parties</h3>
        <ul>
            @foreach (var entry in SettingsService.History)
            {
                <li>Id : @entry.Id UserId : @entry.UserId 
                    <ul>
                        @foreach(var element in entry.Path)
                        {
                            <li>@element </li>
                        }
                    </ul>
                    Temps : @entry.Timestamp
                </li>
                
            }
        </ul>
    }
    else
    {
        <p>Aucune partie trouvée.</p>
    }
}


<button @onclick="ToggleAllHistory">Afficher/Masquer l'historique de l'ensemble des parties'</button>
@if (IsAllHistoryVisible)
{
    @if(SettingsService.AllHistory != null)
    {
        <h3>Historique de l'ensemble des parties</h3>
        <ul>
            @foreach (var entry in SettingsService.AllHistory)
            {
                <li>
                    Id : @entry.Id UserId : @entry.UserId
                    <ul>
                        @foreach (var element in entry.Path)
                        {
                            <li>@element </li>
                        }
                    </ul>
                    Temps : @entry.Timestamp
                    <button @onclick="() => deleteEntry(entry.Id)">Delete</button>
                </li>

            }
        </ul>
    }
    else
    {
        <p>Aucune partie trouvée.</p>
    }
}

@code {
    private bool IsUserListVisible = false;
    private bool IsHistoryVisible = false;
    private bool IsAllHistoryVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await SettingsService.getUserList();
        await SettingsService.getHistory();
        await SettingsService.getAllHistory();
    }


    private void ToggleUserList()
    {
        IsUserListVisible = !IsUserListVisible;
    }
    private void ToggleHistory()
    {
        IsHistoryVisible = !IsHistoryVisible;
    }
    private void ToggleAllHistory()
    {
        IsAllHistoryVisible = !IsAllHistoryVisible;
    }

    private async Task deleteUser(int id)
    {
        await SettingsService.deleteUser(id);
    }

    private async Task deleteEntry(int id)
    {
        await SettingsService.deleteEntry(id);
    }




}
